/*  This file is part of the Rade project (https://github.com/mgimpel/rade).
 *  Copyright (C) 2018 Marc Gimpel
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
/* $Id$ */
package fr.aesn.rade.persist.model;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PrePersist;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.Size;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

/**
 * Entity: Audit.
 * <pre>
 * CREATE TABLE ZR_AUDIT (
 *   AUDIT_ID     integer       NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 *   AUDIT_AUTEUR varchar(8)    NOT NULL,
 *   AUDIT_DATE   date          NOT NULL,
 *   AUDIT_NOTE   varchar(4000)
 * );
 * </pre>
 * @author Marc Gimpel (mgimpel@gmail.com)
 */
@Entity
@Table(name = "ZR_AUDIT")
@Getter @Setter @NoArgsConstructor
@ToString @EqualsAndHashCode
@Builder @AllArgsConstructor(staticName = "of")
public class Audit implements Serializable {
  /** Unique Identifier for Serializable Class. */
  private static final long serialVersionUID = 745022625240437798L;

  /** Identifiant de la modification. */
  @Id
  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "id_Sequence_Audit")
  @SequenceGenerator(name = "id_Sequence_Audit", sequenceName = "audit_seq", allocationSize = 1)
  @Column(name = "AUDIT_ID", nullable = false)
  private Integer id;

  /** Auteur de la modification. */
  @Size(max = 8)
  @Column(name = "AUDIT_AUTEUR", length = 8, nullable = false)
  private String auteur;

  /** Date de la modification. */
  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "AUDIT_DATE", nullable = false)
  private Date date;

  /** Auteur de la modification. */
  @Size(max = 4000)
  @Column(name = "AUDIT_NOTE", length = 4000, nullable = true)
  private String note;

  /**
   * Before JPA persists the Entity, if no Creation Date is fixed, set it.
   */
  @PrePersist
  protected void onCreate() {
    if (date == null) {
      date = new Date();
    }
  }
}
